diff a/app.js b/app.js	(rejected hunks)
@@ -76,7 +77,7 @@ app.use(morgan("default", { "stream": logger.stream }));
 
 // Avoid leaking stacktrace to user
 app.use(function(err, req, res) {
-    logger.error('error %s', err.message);
+	logger.error('error %s', err.message);
 });
 
 // This handler is a catch-all for 404 errors
@@ -95,9 +96,12 @@ io.sockets.on('connection', function (socket) {
 		
 		// Store user data
 		users.push({ 'ip': ip, 'socket': socketId, 'username': data.username, 'avatar': data.avatar });
-		
+
+		data.username = entities.encodeHTML(data.username);
+		data.avatar = entities.encodeHTML(data.avatar);
+
 		// Alert all users of the connection
-		connData = { 'type': 'userConnection', 'user': { 'username': HTMLToPlainText(data.username), 'avatar': data.avatar }, 'time': Date.now() };
+		connData = { 'type': 'userConnection', 'user': { 'username': data.username, 'avatar': data.avatar }, 'time': Date.now() };
 		io.sockets.emit('message', connData);
 	});
 	
@@ -123,11 +130,16 @@ io.sockets.on('connection', function (socket) {
 		
 		var user = getUserByPropertyValue('socket', socketId)[0];
 
-        logger.info('message %s', messageData);
+		logger.info('message %s', messageData);
+
+		messageData.username = entities.encodeHTML(messageData.username);
+		messageData.avatar = entities.encodeHTML(messageData.avatar);
+		messageData.content = entities.encodeHTML(messageData.content);
+		messageData.time = new Date(messageData.time);
 
 		// Send message to all users
 		if (typeof user != 'undefined') {
-			messageData = { 'type': 'userMessage', 'user': { 'username': HTMLToPlainText(messageData.username), 'avatar': HTMLToPlainText(messageData.avatar) }, 'message': { 'content': HTMLToPlainText(messageData.content), 'time': messageData.time } };
+			messageData = { 'type': 'userMessage', 'user': { 'username': messageData.username, 'avatar': messageData.avatar }, 'message': { 'content': messageData.content, 'time': messageData.time } };
 			io.sockets.emit('message', messageData);
 		}
 	});
@@ -163,7 +175,7 @@ function checkUserData(request, response) {
 		response.end(JSON.stringify({ 'errors': ['Can\'t use an empty username'] }));
 		return false;
 	}
-    // Empty avatar
+	// Empty avatar
 	else if (typeof request.body.avatar == 'undefined' || request.body.avatar.isEmptyOrWhitespace()) {
 		response.writeHead(400, { 'Content-type': 'application/json' });
 		response.end(JSON.stringify({ 'errors': ['Can\'t use an empty avatar'] }));
@@ -212,9 +224,3 @@ function getUserByPropertyValue(propertyName, value) {
 		}
 	})
 };
-
-function HTMLToPlainText(string) {
-	string = string.replace(/</g, "&lt;");
-	string = string.replace(/>/g, "&gt;");
-	return string;
-}
\ No newline at end of file
